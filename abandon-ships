#!/usr/bin/env coffee

# remove crew and fuel from vessels
# usage: $0 < persistent.json > derelicts.json

count = 0
data = ''
process.stdin.on("data", (chunk)->
    data += chunk
)
process.stdin.on("end", ->
    save = JSON.parse(data)
    data = null
    processVessels(save)
    process.stdout.write(JSON.stringify(save, null, '  '))
    console.error("processed #{count} ships")
)

ensureArray = (thing)->
    return thing if thing instanceof Array
    return [thing]

vesselSize = (partCount)->
    # 1 - 49 parts: tiny
    # 50 - 91 parts: small
    # 92 - 385 parts: medium
    # 386 - 2400 parts: large
    # 2400+ parts: huge
    x = Math.max(1, partCount-43)
    y = Math.log(x)/Math.log(7)
    Math.floor(Math.min(4, y))

processVessels = (save)->
    return unless save?.GAME?.FLIGHTSTATE?.VESSEL
    vessels = ensureArray(save.GAME.FLIGHTSTATE.VESSEL)
    save.GAME.FLIGHTSTATE.VESSEL = vessels
    for vessel in vessels
        count++
        parts = ensureArray(vessel.PART)
        vessel.PART = parts
        for part in parts
            # remove crew
            delete part.crew

            # remove fuel
            if part.RESOURCE
                resources = ensureArray(part.RESOURCE)
                for resource in resources
                    resource.amount = 0
                part.RESOURCE = resources

        unless vessel.type in ["Debris", "SpaceObject"]
            # mark as trackable
            vessel.DISCOVERY ?= {}
            vessel.DISCOVERY.lastObservedTime ?= 0
            vessel.DISCOVERY.lifetime ?= "Infinity"
            vessel.DISCOVERY.refTime ?= "Infinity"
            vessel.DISCOVERY.state ?= -1
            if parseInt(vessel.DISCOVERY.state) is -1
                vessel.DISCOVERY.state = 21 # identified, untracked
            vessel.DISCOVERY.size = vesselSize(parts.length)

    return save
