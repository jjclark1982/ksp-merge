#!/usr/bin/env coffee

# remove crew and fuel from vessels
# usage: $0 < persistent.json > derelicts.json

count = 0
data = ''
process.stdin.on("data", (chunk)->
    data += chunk
)
process.stdin.on("end", ->
    save = JSON.parse(data)
    data = null
    processVessels(save)
    process.stdout.write(JSON.stringify(save, null, '  '))
    console.error("processed #{count} ships")
)

ensureArray = (thing)->
    if thing instanceof Array then thing else [thing]

totalMass = (vessel)->
    total = 0
    for part in ensureArray(vessel.PART)
        mass = parseFloat(part.mass)
        if mass
            total += mass
    return total

vesselSize = (vessel)->
    # 0 - 5 tons: tiny
    # 5 - 17 tons: small
    # 17 - 65 tons: medium
    # 65 - 257 tons: large
    # 257+ tons: huge
    tons = totalMass(vessel)
    size = Math.log(Math.max(1, tons-1))/Math.log(4)
    return Math.floor(Math.min(4, size))

    # 1 - 50 parts: tiny
    # 50 - 140 parts: small
    # 140 - 410 parts: medium
    # 410 - 1220 parts: large
    # 1220+ parts: huge
    partCount = ensureArray(vessel.PART).length
    x = Math.max(1, (partCount-5)/15)
    y = Math.log(x)/Math.log(3)
    Math.floor(Math.min(4, y))

processVessels = (save)->
    return unless save?.GAME?.FLIGHTSTATE?.VESSEL
    vessels = ensureArray(save.GAME.FLIGHTSTATE.VESSEL)
    save.GAME.FLIGHTSTATE.VESSEL = vessels
    for vessel in vessels
        count++
        parts = ensureArray(vessel.PART)
        vessel.PART = parts
        for part in parts
            # remove crew
            delete part.crew

            # remove fuel
            if part.RESOURCE
                resources = ensureArray(part.RESOURCE)
                for resource in resources
                    resource.amount = 0
                part.RESOURCE = resources

        # avoid importing flags
        if vessel.type is "Flag"
            vessel.pid = "00000000000000000000000000000000"

        unless vessel.type in ["Debris", "SpaceObject"]
            # mark as trackable
            vessel.DISCOVERY ?= {}
            vessel.DISCOVERY.lastObservedTime ?= 0
            vessel.DISCOVERY.lifetime ?= "Infinity"
            vessel.DISCOVERY.refTime ?= "Infinity"
            vessel.DISCOVERY.state ?= -1
            if parseInt(vessel.DISCOVERY.state) is -1
                vessel.DISCOVERY.state = 21 # identified, untracked
            vessel.DISCOVERY.size = vesselSize(vessel)

    return save
